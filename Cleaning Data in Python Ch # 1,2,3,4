1. Print the information of ride_sharing.
2. Use .describe() to print the summary statistics of the user_type column from ride_sharing.

# Print the information of ride_sharing
print(ride_sharing.info())

# Print summary statistics of user_type column
print(ride_sharing['user_type'].describe())

3. Convert user_type into categorical by assigning it the 'category' data type and store it in the user_type_cat column.
4. Make sure you converted user_type_cat correctly by using an assert statement.

# Print the information of ride_sharing
print(ride_sharing.info())

# Print summary statistics of user_type column
print(ride_sharing['user_type'].describe())

# Convert user_type from integer to category
ride_sharing['user_type_cat'] = ride_sharing['user_type'].astype('category')

# Write an assert statement confirming the change
assert ride_sharing['user_type_cat'].dtype == 'category'

# Print new summary statistics 
print(ride_sharing['user_type_cat'].describe())

5. Use the .strip() method to strip duration of "minutes" and store it in the duration_trim column.
6. Convert duration_trim to int and store it in the duration_time column.
7. Write an assert statement that checks if duration_time's data type is now an int.
8. Print the average ride duration.

# Strip duration of minutes
ride_sharing['duration_trim'] = ride_sharing['duration'].str.strip('minutes') 

# Convert duration to integer
ride_sharing['duration_time'] = ride_sharing['duration_trim'].astype('int')

# Write an assert statement making sure of conversion
assert ride_sharing['duration_time'].dtype == 'int'

# Print formed columns and calculate average ride duration 
print(ride_sharing[['duration','duration_trim','duration_time']])
print(ride_sharing['duration_time'].mean())


9. Convert the tire_sizes column from category to 'int'.
10. Use .loc[] to set all values of tire_sizes above 27 to 27.
11. Reconvert back tire_sizes to 'category' from int.
12. Print the description of the tire_sizes.

# Convert tire_sizes to integer
ride_sharing['tire_sizes'] = ride_sharing['tire_sizes'].astype('int')

# Set all values above 27 to 27
ride_sharing.loc[ride_sharing['tire_sizes'] > 27, 'tire_sizes'] = 27

# Reconvert tire_sizes back to categorical
ride_sharing['tire_sizes'] = ride_sharing['tire_sizes'].astype('category')

# Print tire size description
print(ride_sharing['tire_sizes'].describe())

13. Convert ride_date to a datetime object using to_datetime(), then convert the datetime object into a date and store it in ride_dt column.
14. Create the variable today, which stores today's date by using the dt.date.today() function.
15. For all instances of ride_dt in the future, set them to today's date.
16. Print the maximum date in the ride_dt column.

# Convert ride_date to date
ride_sharing['ride_dt'] = pd.to_datetime(ride_sharing['ride_date']).dt.date

# Save today's date
today = dt.date.today()

# Set all in the future to today's date
ride_sharing.loc[ride_sharing['ride_dt'] > today, 'ride_dt'] = today

# Print maximum of ride_dt column
print(ride_sharing['ride_dt'].max())


17. Find duplicated rows of ride_id in the ride_sharing DataFrame while setting keep to False.
18. Subset ride_sharing on duplicates and sort by ride_id and assign the results to duplicated_rides.
19. Print the ride_id, duration and user_birth_year columns of duplicated_rides in that order.

# Find duplicates
duplicates = ride_sharing.duplicated(subset = 'ride_id', keep = False)

# Sort your duplicated rides
duplicated_rides = ride_sharing[duplicates].sort_values('ride_id')

# Print relevant columns
print(duplicated_rides[['ride_id','duration','user_birth_year']])

20. Drop complete duplicates in ride_sharing and store the results in ride_dup.
21. Create the statistics dictionary which holds minimum aggregation for user_birth_year and mean aggregation for duration.
22. Drop incomplete duplicates by grouping by ride_id and applying the aggregation in statistics.
23. Find duplicates again and run the assert statement to verify de-duplication.

# Drop complete duplicates from ride_sharing
ride_dup = ride_sharing.drop_duplicates()

# Create statistics dictionary for aggregation function
statistics = {'user_birth_year': 'min', 'duration': 'mean'}

# Group by ride_id and compute new statistics
ride_unique = ride_dup.groupby('ride_id').agg(statistics).reset_index()

# Find duplicated values again
duplicates = ride_unique.duplicated(subset = 'ride_id', keep = False)
duplicated_rides = ride_unique[duplicates == True]

# Assert duplicates are processed
assert duplicated_rides.shape[0] == 0

